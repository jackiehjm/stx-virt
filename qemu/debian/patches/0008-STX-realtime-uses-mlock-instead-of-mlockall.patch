From f06fb5c1bf146f661fdca218943018fcf25c5ca6 Mon Sep 17 00:00:00 2001
From: Jim Somerville <Jim.Somerville@windriver.com>
Date: Fri, 26 Apr 2019 17:41:04 -0300
Subject: [PATCH] STX: realtime uses mlock instead of mlockall

This enhances qemu to use mlock() instead of mlockall() when
'-realtime mlock=on' is specified, so that memory is engineerable.

mlockall() is not practically engineerable since it requires significant
4K reserved memory per process. It will lock pages of the code, data and
stack segment, shared libraries, user space kernel data, shared memory,
and memory-mapped files.  This easily translates to >> 1GiB when you
consider [heap] segment of 225MiB and VmData near 500 MiB to 900 MiB.

Using mlock() only in ram_block_add(), we no longer lock stack / data,
shared libraries, and heap.

NOTE: This degrades the guarantee provided by '-realtime mlock=on'
since we may end up delaying the instance to fault in code pages from
disk or allocate memory, thus breaking any realtime guarantees.

Signed-off-by: Jim Somerville <Jim.Somerville@windriver.com>
Signed-off-by: Rafael Falcao <Rafael.VieiraFalcao@windriver.com>
[Rebased original changes to the qemu 7.2 version]
Signed-off-by: david.liu <david.liu@windriver.com>
---
 softmmu/physmem.c | 14 +++++++++++++-
 softmmu/vl.c      |  8 +++-----
 2 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/softmmu/physmem.c b/softmmu/physmem.c
index 1b606a30..b2cff2b9 100644
--- a/softmmu/physmem.c
+++ b/softmmu/physmem.c
@@ -49,6 +49,7 @@
 #include "sysemu/dma.h"
 #include "sysemu/hostmem.h"
 #include "sysemu/hw_accel.h"
+#include "sysemu/sysemu.h"
 #include "sysemu/xen-mapcache.h"
 #include "trace/trace-root.h"
 
@@ -1542,6 +1543,7 @@ static void *file_ram_alloc(RAMBlock *block,
 {
     uint32_t qemu_map_flags;
     void *area;
+    int flags;
 
     block->page_size = qemu_fd_getpagesize(fd);
     if (block->mr->align % block->page_size) {
@@ -1588,11 +1590,16 @@ static void *file_ram_alloc(RAMBlock *block,
         perror("ftruncate");
     }
 
+     /* WRS - enable mlock */
+    flags = block->flags & RAM_SHARED;
+    if (enable_mlock) {
+        flags |= MAP_LOCKED;
+    }
     qemu_map_flags = readonly ? QEMU_MAP_READONLY : 0;
     qemu_map_flags |= (block->flags & RAM_SHARED) ? QEMU_MAP_SHARED : 0;
     qemu_map_flags |= (block->flags & RAM_PMEM) ? QEMU_MAP_SYNC : 0;
     qemu_map_flags |= (block->flags & RAM_NORESERVE) ? QEMU_MAP_NORESERVE : 0;
-    area = qemu_ram_mmap(fd, memory, block->mr->align, qemu_map_flags, offset);
+    area = qemu_ram_mmap(fd, memory, block->mr->align, flags, block->flags & RAM_PMEM);
     if (area == MAP_FAILED) {
         error_setg_errno(errp, errno,
                          "unable to map backing store for guest RAM");
@@ -2044,6 +2051,11 @@ static void ram_block_add(RAMBlock *new_block, Error **errp)
         }
         ram_block_notify_add(new_block->host, new_block->used_length,
                              new_block->max_length);
+        if (enable_mlock) {
+            if (mlock(new_block->host, new_block->max_length) < 0) {
+                perror("mlock");
+            }
+        }
     }
 }
 
diff --git a/softmmu/vl.c b/softmmu/vl.c
index 5115221e..2a029b9e 100644
--- a/softmmu/vl.c
+++ b/softmmu/vl.c
@@ -2,6 +2,7 @@
  * QEMU System Emulator
  *
  * Copyright (c) 2003-2008 Fabrice Bellard
+ * Copyright (c) 2013-2023 Wind River Systems, Inc. All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -96,7 +97,6 @@
 #include "fsdev/qemu-fsdev.h"
 #endif
 #include "sysemu/qtest.h"
-
 #include "disas/disas.h"
 
 #include "trace.h"
@@ -750,10 +750,8 @@ static QemuOptsList qemu_smp_opts = {
 static void realtime_init(void)
 {
     if (enable_mlock) {
-        if (os_mlock() < 0) {
-            error_report("locking memory failed");
-            exit(1);
-        }
+        /* WRS - do not call os_mlock(), prevent call to mlockall */
+        ;
     }
 }
 
-- 
2.30.2

